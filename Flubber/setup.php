#!/usr/bin/env php
<?php

$config_keys =  array(
	'FILE' => '',
	'URL' => 'example.com',
	'SSL' => 'false',
	'ADMIN' => 'admin@example.com',
	'TIMEZONE'=> 'UTC',
	'SESSION_NAME' => '__ses',
	'SESSION_EXPIRY'=> '3600',
	'SESSION_IDLE'=> '3600',
	'SESSION_AUTO_RENEW' => 'true',
	'LOGIN_PATH' => '/login',
	'TOKEN_SECRET' => '',
	'TOKEN_EXPIRY' => '300',
	'DB_TYPE' =>'mysql',
	'DB_HOST' =>'localhost',
	'DB_USER' => '',
	'DB_PASS' =>'',
	'DB_NAME' => ''
);


function logger($str) {
	if (is_array($str)) {
		print_r($str);
	} else {
		echo $str;
	}
	echo "\n";
}

function extract_config_from_cmdline($arguments) {
	global $config_keys;
	$config = array();
	$re = "/^--([a-z]+)\\=(.*)$/m";
	foreach ($arguments as $key => $value) {
		if (preg_match_all($re, $value, $matches)) {
			if (!isset($matches[1])) continue;
			if (!isset($matches[2])) continue;
			$config[strtoupper($matches[1][0])] = $matches[2][0];
		}
	}
	return $config;
}

function get_sample_config($config) {
	global $config_keys;
	$template  = "<?php
/*
 * Generated by Flubber setup
 */
define('SITEURL', '__URL__');

define('HAS_SSL', __SSL__);

define('SITEADMIN', '__ADMIN__');

define('TIMEZONE', '__TIMEZONE__');

define('SESSION_NAME', '__SESSION_NAME__');

define('SESSION_EXPIRY', __SESSION_EXPIRY__);

define('SESSION_IDLE', __SESSION_IDLE__);

define('SESSION_AUTO_RENEW', __SESSION_AUTO_RENEW__);

define('LOGIN_URI', '__LOGIN_PATH__');

// CSRF token secret, make sure to put a long random string.
define('TOKEN_SECRET', '__TOKEN_SECRET__');

// CSRF tokens expiry time (in seconds)
define('TOKEN_EXPIRY', __TOKEN_EXPIRY__);

// DB configuration
define('DBTYPE', '__DB_TYPE__');

define('DBHOST', '__DB_HOST__');

define('DBUSER', '__DB_USER__');

define('DBPASS', '__DB_PASS__');

define('DBNAME', '__DB_NAME__');

?>";

	foreach($config_keys as $key => $default) {
		$re = "~__".$key."__~m";
		$subst = "";
		if (array_key_exists($key, $config)) {
			$subst = $config[$key];
		} else {
			$subst = $default;
		}
		$template = preg_replace($re, $subst, $template);
	}
	return $template;
}

function prepare_dirs() {
	global $config;

	if (!array_key_exists('PATH', $config)) {
		echo "Unable to find --path in config.";
		exit;
	}
	$path = $config['PATH'];
	if (file_exists($path)) {
		echo $path . " already exists.";
		exit;
	}
	if (!mkdir($path)) {
		echo "Unable to create `".$path."`.  Make sure you have permission to the directory.";
		exit;
	}

	if (!chmod($path, 0777)) {
		echo "Unable to give full permission to directory. Give the directory write permission before running the setup.";
		exit;
	}

	mkdir($path."/config", 0777);
	mkdir($path."/config/locale", 0777);
	mkdir($path."/handlers", 0777);
	mkdir($path."/public", 0777);
	mkdir($path."/public/js", 0777);
	mkdir($path."/public/css", 0777);
	mkdir($path."/public/images", 0777);
	mkdir($path."/views", 0777);
	mkdir($path."/views/templates", 0777);
}

function create_core_files() {
	global $FlubberPath,$config;
	$path = $config['PATH'];
	$index = sprintf("<?php

// Autoload Flubber
include_once '%sAutoload.php';

\$config = array( 'app' => '%s' );

// Start application with the Loaded configuration
\$flubberapp = new Flubber\Flubber(\$config);
\$flubberapp->start();

?>", $FlubberPath, $path.'/');
	file_put_contents($path."/public/index.php", $index);

	$config_content = get_sample_config($config);
	file_put_contents($path."/config/config.php", $config_content);

	$functions = "<?php
/*
 * Add your custom functions here
 */

?>";
	file_put_contents($path."/config/function.php", $functions);


	$urls = "<?php
/*
 * Add your urls here
 */

\$urls = array(

	// array('Regular expression for url parsing', 'Handler name')

	array( '/^\$/', 'Home'),

	// You can also extract values from url path into a variable
	array( '/^test\/(?P<id>[a-zA-Z0-9]+)\$/', 'Test')

	// Here the variable `id` is extracted
	// In handler this can be accesed as `\$this->request->param('id');`

);

?>";
	file_put_contents($path."/config/urls.php", $urls);

	$home_handler = "<?php
/*
 *  Home Handler
 */

use Flubber\BaseHandler as BaseHandler;

class Home extends BaseHandler {

	function __construct() {
		parent::__construct(array(
			'auth' => array(),
			'csrf_check'=> false));
	}

	function get() {
		\$this->set_status(200);

		// send some values to template
		\$response = array('message'=>'hello');

		// show `home` template
		\$this->show_page('home', \$response);
	}
}

?>";
	file_put_contents($path."/handlers/Home.php", $home_handler);

	$base_html = "<html>
  <head>
    <title> Welcome! </title>
  </head>
  <body>
      {% block body %} {% endblock %}
  </body>
</html>";
	file_put_contents($path."/views/templates/base.html", $base_html);

	$home_html = "{% extends 'base.html' %}
{% block body %}
	<h1>{{message|_s}}</h1>
	<p>
		`| _s` is special Twig templating filter syntax) <br>
		So `{ { variable | _s } }` will get the value from locale file with value of `variable` in /config/locale.<br>
		in this case this will be replaced like below { { 'hello' | _s } }<br>
	</p>

{% endblock %}";
	file_put_contents($path."/views/templates/home.html", $home_html);

	$en_locale = ";English locale strings
flubber = \"Flubber\"
hello = \"Hello World!\"";
	file_put_contents($path."/config/locale/en.ini", $en_locale);
}

logger("Starting Installation");

$FlubberPath = __DIR__ . '/';

logger("Flubber Path : ".$FlubberPath);

$config = extract_config_from_cmdline($argv);

prepare_dirs();
create_core_files();


